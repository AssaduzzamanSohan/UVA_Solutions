#include<bits/stdc++.h>
using namespace std;
#define Faster ios_base::sync_with_stdio(false); cin.tie(0)
#define ll long long int
#define PI 3.14159265358979323846
ll fib_list[45]= {0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733};
ll powerOf2_list[30]= {1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912};

ll Moves(ll i, ll j, ll l1, ll l2, ll n, ll m)
{
    ll x,y,a,b,Ans=0;
    for(x=i; x<=l1; x++)
    {
        for(y=j; y<=l2; y++)
        {
            a=n-x;
            b=m-y;
            Ans+=min(a,b);
            a=x-1;
            b=m-y;
            Ans+=min(a,b);
            a=x-1;
            b=y-1;
            Ans+=min(a,b);
            a=n-x;
            b=y-1;
            Ans+=min(a,b);
            Ans+=n-1;
            Ans+=m-1;
        }
    }
    return Ans;
}

int main()
{
    ll n,m,Ans,Ans1,ck,ck1,ck2;

    while (scanf("%lld %lld",&n,&m) && n)
    {
        Ans=0;
        if(n==1 && m==1)
            Ans=0;
        else if(n==1 && m>1)
            Ans=m*(m-1);
        else if(n>1 && m==1)
            Ans=n*(n-1);
        else
        {
            Ans=Moves(1,1,n/2,m/2,n,m);
            Ans*=4;
            if(n%2==1 && m%2==0)
            {
                ck=n/2;
                ck++;
                Ans1=Moves(ck,1,ck,m/2,n,m);
                Ans1*=2;
                Ans+=Ans1;
            }
            else if(n%2==0 && m%2==1)
            {
                ck=m/2;
                ck++;
                Ans1=Moves(1,ck,n/2,ck,n,m);
                Ans1*=2;
                Ans+=Ans1;
            }
            else if(n%2==1 && m%2==1)
            {
                ck=n/2;
                ck++;
                Ans1=Moves(ck,1,ck,m/2,n,m);
                Ans1*=2;
                Ans+=Ans1;
                ck=m/2;
                ck++;
                Ans1=Moves(1,ck,n/2,ck,n,m);
                Ans1*=2;
                Ans+=Ans1;
                ck1=n/2;
                ck1++;
                ck2=m/2;
                ck2++;
                Ans1=Moves(ck1,ck2,ck1,ck2,n,m);
                Ans+=Ans1;
            }
        }
        printf("%lld\n",Ans);
    }
    return 0;
}
