#include<bits/stdc++.h>
using namespace std;
#define Faster ios_base::sync_with_stdio(false); cin.tie(0)
#define ll long long int
#define MAX LLONG_MIN
#define MIN LLONG_MAX
#define PI 3.14159265358979323846
ll fib_list[45]= {0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733};
ll powerOf2_list[30]= {1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912};
vector<int> get_primes(int max)
{
    vector<int> primes;
    int i,j;
    char *sieve;
    sieve = new char[max/8+1];
    memset(sieve, 0xFF, (max/8+1) * sizeof(char));
    for( i = 2; i <= max; i++)
        if(sieve[i/8] & (0x01 << (i % 8)))
        {
            primes.push_back(i);
            for(j = 2*i; j <= max; j += i)
                sieve[j/8] &= ~(0x01 << (j % 8));
        }
    delete[] sieve;
    return primes;
    //How to call
    //vector<int> primes;
    //primes = get_primes(1000000);
}

int main()
{
    int n,i,cnt=0,Ans;
    while(scanf("%d",&n))
    {
        if(n<0)
            return 0;
        cnt++;
        if(n==1)
            printf("Case %d: 0\n",cnt);
        else
        {
            Ans=0;
            for(i=2; ; i*=2)
            {
                Ans++;
                if(i>=n)
                {
                    printf("Case %d: %d\n",cnt,Ans);
                    break;
                }
            }
        }
    }
    return 0;
}
